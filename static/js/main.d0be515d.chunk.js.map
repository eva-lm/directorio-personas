{"version":3,"sources":["components/Filters.js","components/List.js","components/App.js","data/service.js","index.js"],"names":["Filters","props","onGenderChanges","genders","allCities","onCityChanges","cities","type","name","id","value","onChange","checked","includes","htmlFor","map","item","key","List","className","users","user","index","title","first","src","picture","medium","alt","location","city","dob","age","App","state","data","isFetching","filters","getUser","bind","handleGenderFilter","handleCityFilter","fetch","then","response","json","setState","prevState","results","filter","ind","arr","indexOf","event","target","console","log","this","concat","find","length","gender","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0be515d.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\n//import { isNoop } from \"@babel/types\";\nimport PropTypes from \"prop-types\";\n\nconst Filters = props => {\n  const { onGenderChanges, genders, allCities, onCityChanges, cities } = props;\n  return (\n    <form>\n      <fieldset>\n        <legend>Gender</legend>\n        <input\n          type=\"checkbox\"\n          name=\"genders\"\n          id=\"female\"\n          value=\"female\"\n          onChange={onGenderChanges}\n          checked={genders.includes(\"female\")}\n        />\n        <label htmlFor=\"female\">Female</label>\n        <input\n          type=\"checkbox\"\n          name=\"genders\"\n          id=\"male\"\n          value=\"male\"\n          onChange={onGenderChanges}\n          checked={genders.includes(\"male\")}\n        />\n        <label htmlFor=\"male\">Male</label>\n      </fieldset>\n      <fieldset>\n        <legend>Cities</legend>\n        {allCities.map(item => {\n          return (\n            <Fragment key={item}>\n              <input\n                type=\"checkbox\"\n                name=\"cities\"\n                id={item}\n                value={item}\n                onChange={onCityChanges}\n                checked={cities.includes(item)}\n              />\n              <label htmlFor={item}>{item}</label>\n            </Fragment>\n          );\n        })}\n      </fieldset>\n    </form>\n  );\n};\n\nFilters.propTypes = {\n  onGenderChanges: PropTypes.func.isRequired,\n  genders: PropTypes.arrayOf(PropTypes.string).isRequired,\n  allCities: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onCityChanges: PropTypes.func.isRequired,\n  cities: PropTypes.arrayOf(PropTypes.string).isRequired\n};\n\nexport default Filters;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"./Card\";\n\nconst List = props => {\n  return (\n    <ul className=\"users_list\">\n      {props.users.map((user, index) => (\n        <li className=\"person\" key={index}>\n          <p className=\"title\">{user.name.title}</p>\n          <p className=\"name\">{user.name.first}</p>\n          <img src={user.picture.medium} alt=\"user profile\" />\n          <p className=\"city\">{user.location.city}</p>\n          <p className=\"age\">{user.dob.age}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nList.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\n/*   .filter(user => {\n          return user.location.city.includes(this.state.city);\n        }) */\n\nexport default List;\n","import React, { Fragment, Component } from \"react\";\nimport \"../stylesheets/App.css\";\nimport { getDataFromServer } from \"../data/service\";\nimport Filters from \"./Filters\";\nimport List from \"./List\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: {\n        data: [],\n        isFetching: true\n      },\n      filters: {\n        genders: [], //usamos array porq podemos tener varios inputs checkeados, si fuera radio-button con una cadena vacia valdría. Guardamos los checkbox gender que estén checkeados.\n        cities: [],\n        allCities: []\n      }\n    };\n    this.getUser = this.getUser.bind(this);\n    //this.handleCities = this.handleCities.bind(this);\n    this.handleGenderFilter = this.handleGenderFilter.bind(this);\n    this.handleCityFilter = this.handleCityFilter.bind(this);\n\n    this.getUser();\n  }\n  getUser() {\n    getDataFromServer().then(data => {\n      this.setState(prevState => {\n        return {\n          users: {\n            data: data.results,\n            isFetching: false\n          },\n          filters: {\n            ...prevState.filters,\n            allCities: data.results\n              .map(item => item.location.city)\n              .filter((item, ind, arr) => arr.indexOf(item) === ind)\n          }\n        };\n      });\n    });\n  }\n  /*   handleCities(ev) {\n    debugger;\n    const value = ev.target.value;\n    this.setState({\n      cities: value\n    });\n  }\n */\n  handleGenderFilter(event) {\n    const { value, checked } = event.target;\n    console.log(checked);\n\n    this.setState(prevState => {\n      return {\n        filters: {\n          ...prevState.filters,\n          //si está checkeado checkeo sino, descheckeo.\n          genders: checked\n            ? prevState.filters.genders.concat(value)\n            : prevState.filters.genders.filter(item => item !== value)\n        }\n      };\n    });\n  }\n\n  handleCityFilter(event) {\n    const { value } = event.target;\n    console.log(value);\n    this.setState(prevState => {\n      return {\n        filters: {\n          ...prevState.filters,\n          //si el value está en el array lo quito de la array. Si no está en la array lo añado.\n          cities: prevState.filters.cities.find(item => item === value)\n            ? prevState.filters.cities.filter(item => item !== value)\n            : prevState.filters.cities.concat(value)\n        }\n      };\n    });\n  }\n\n  render() {\n    const { isFetching, data } = this.state.users;\n    const { genders, allCities, cities } = this.state.filters;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1 className=\"title\">People Directory</h1>\n        </header>\n        {this.state.users.isFetching ? (\n          <p>Loading....</p>\n        ) : (\n          <Fragment>\n            <Filters\n              onGenderChanges={this.handleGenderFilter}\n              genders={genders} //inputs de género\n              allCities={allCities}\n              onCityChanges={this.handleCityFilter}\n              cities={cities}\n            />\n            <List\n              users={data\n                .filter(\n                  user => !genders.length || genders.includes(user.gender)\n                )\n                .filter(\n                  user => !cities.length || cities.includes(user.location.city)\n                )}\n            />\n          </Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\n/* <label className=\"cities\" htmlFor=\"cities\">\nLocation\n</label>\n<input\nid=\"cities\"\ntype=\"text\"\nvalue={this.state.cities}\nonChange={this.handleCities}\n></input> */\n\nexport default App;\n","const url = \"https://randomuser.me/api/?results=50\";\n\nconst getDataFromServer = () => {\n  return fetch(url).then(response => response.json());\n};\nexport { getDataFromServer };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./components/App\";\n//import * as serviceWorker from './serviceWorker';\n//import { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}